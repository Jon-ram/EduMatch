-- MySQL Script generated by MySQL Workbench
-- Thu Aug 22 13:48:52 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema edumatch2
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `edumatch2` ;

-- -----------------------------------------------------
-- Schema edumatch2
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `edumatch2` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `edumatch2` ;

-- -----------------------------------------------------
-- Table `edumatch2`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(50) NOT NULL,
  `Apellido_P` VARCHAR(50) NOT NULL,
  `Apellido_M` VARCHAR(50) NOT NULL,
  `Edad` INT NOT NULL,
  `Contrase√±a` VARCHAR(255) NOT NULL,
  `Correo` VARCHAR(100) NOT NULL,
  `Telefono` VARCHAR(15) NULL DEFAULT NULL,
  `Rol` ENUM('Administrador', 'Usuario') NULL DEFAULT NULL,
  `fecha_reg` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`idUsuario`))
ENGINE = InnoDB
AUTO_INCREMENT = 100018
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `edumatch2`.`carrera`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`carrera` (
  `idCarrera` INT NOT NULL AUTO_INCREMENT,
  `Tipo` VARCHAR(50) NULL DEFAULT NULL,
  `Duracion` VARCHAR(70) NULL DEFAULT NULL,
  `Descripcion` VARCHAR(200) NULL DEFAULT NULL,
  `Nombre` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`idCarrera`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `edumatch2`.`video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`video` (
  `idVideo` INT NOT NULL AUTO_INCREMENT,
  `Titulo` VARCHAR(45) NULL DEFAULT NULL,
  `URL_video` VARCHAR(45) NULL DEFAULT NULL,
  `idUsuario` INT NULL DEFAULT NULL,
  `Fecha_publicacion` DATE NULL DEFAULT NULL,
  `idCarrera` INT NULL DEFAULT NULL,
  `Descripcion` VARCHAR(45) NULL DEFAULT NULL,
  `Duracion` TIME NULL DEFAULT NULL,
  `total_comentario` INT NULL DEFAULT NULL,
  `total_reacciones` INT NULL DEFAULT NULL,
  `total_vistas` INT NULL DEFAULT NULL,
  PRIMARY KEY (`idVideo`),
  CONSTRAINT `video_ibfk_1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `edumatch2`.`usuario` (`idUsuario`),
  CONSTRAINT `video_ibfk_2`
    FOREIGN KEY (`idCarrera`)
    REFERENCES `edumatch2`.`carrera` (`idCarrera`))
ENGINE = InnoDB
AUTO_INCREMENT = 14
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `idUsuario` ON `edumatch2`.`video` (`idUsuario` ASC) VISIBLE;

CREATE INDEX `idCarrera` ON `edumatch2`.`video` (`idCarrera` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `edumatch2`.`anuncios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`anuncios` (
  `idAnuncios` INT NOT NULL AUTO_INCREMENT,
  `Titulo` VARCHAR(70) NULL DEFAULT NULL,
  `Descripcion` VARCHAR(150) NULL DEFAULT NULL,
  `Fecha_publicacion` DATE NULL DEFAULT NULL,
  `Fecha_vencimiento` DATE NULL DEFAULT NULL,
  `idVideo` INT NULL DEFAULT NULL,
  PRIMARY KEY (`idAnuncios`),
  CONSTRAINT `anuncios_ibfk_1`
    FOREIGN KEY (`idVideo`)
    REFERENCES `edumatch2`.`video` (`idVideo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `idVideo` ON `edumatch2`.`anuncios` (`idVideo` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `edumatch2`.`bitacora_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`bitacora_usuario` (
  `idbitacora_usuario` INT NOT NULL AUTO_INCREMENT,
  `idUsuario` INT NULL DEFAULT NULL,
  `nombre` VARCHAR(45) NULL DEFAULT NULL,
  `fecha` DATE NULL DEFAULT NULL,
  `comentario` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`idbitacora_usuario`))
ENGINE = InnoDB
AUTO_INCREMENT = 100018
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `edumatch2`.`bitacora_video`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`bitacora_video` (
  `idbitacora_video` INT NOT NULL AUTO_INCREMENT,
  `idVideo` VARCHAR(45) NULL DEFAULT NULL,
  `idUsuario` VARCHAR(45) NULL DEFAULT NULL,
  `Titulo` VARCHAR(50) NULL DEFAULT NULL,
  `fecha` TIME NULL DEFAULT NULL,
  `comentario` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`idbitacora_video`))
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `edumatch2`.`comentario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`comentario` (
  `idComentario` INT NOT NULL AUTO_INCREMENT,
  `idUsuario` INT NULL DEFAULT NULL,
  `idVideo` INT NULL DEFAULT NULL,
  `Texto` TEXT NOT NULL,
  PRIMARY KEY (`idComentario`),
  CONSTRAINT `comentario_ibfk_1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `edumatch2`.`usuario` (`idUsuario`),
  CONSTRAINT `comentario_ibfk_2`
    FOREIGN KEY (`idVideo`)
    REFERENCES `edumatch2`.`video` (`idVideo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `idUsuario` ON `edumatch2`.`comentario` (`idUsuario` ASC) VISIBLE;

CREATE INDEX `idVideo` ON `edumatch2`.`comentario` (`idVideo` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `edumatch2`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`curso` (
  `idCurso` INT NOT NULL AUTO_INCREMENT,
  `Estado` VARCHAR(50) NULL DEFAULT NULL,
  `Titulo` VARCHAR(70) NULL DEFAULT NULL,
  `idCarrera` INT NULL DEFAULT NULL,
  `Fecha_inicio` DATE NULL DEFAULT NULL,
  `fecha_fin` DATE NULL DEFAULT NULL,
  `descripcion` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`idCurso`),
  CONSTRAINT `curso_ibfk_1`
    FOREIGN KEY (`idCarrera`)
    REFERENCES `edumatch2`.`carrera` (`idCarrera`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `idCarrera` ON `edumatch2`.`curso` (`idCarrera` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `edumatch2`.`practica`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`practica` (
  `idPractica` INT NOT NULL AUTO_INCREMENT,
  `Titulo` VARCHAR(100) NULL DEFAULT NULL,
  `Fecha_inicio` DATE NULL DEFAULT NULL,
  `Fecha_fin` DATE NULL DEFAULT NULL,
  `Estado` VARCHAR(100) NULL DEFAULT NULL,
  `Descripcion` VARCHAR(150) NULL DEFAULT NULL,
  `idCurso` INT NULL DEFAULT NULL,
  PRIMARY KEY (`idPractica`),
  CONSTRAINT `practica_ibfk_1`
    FOREIGN KEY (`idCurso`)
    REFERENCES `edumatch2`.`curso` (`idCurso`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `idCurso` ON `edumatch2`.`practica` (`idCurso` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `edumatch2`.`reacciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`reacciones` (
  `idReaccion` INT NOT NULL AUTO_INCREMENT,
  `Tipo` VARCHAR(20) NULL DEFAULT NULL,
  `idVideo` INT NULL DEFAULT NULL,
  `idUsuario` INT NULL DEFAULT NULL,
  `Fecha_reaccion` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`idReaccion`),
  CONSTRAINT `reacciones_ibfk_1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `edumatch2`.`usuario` (`idUsuario`),
  CONSTRAINT `reacciones_ibfk_2`
    FOREIGN KEY (`idVideo`)
    REFERENCES `edumatch2`.`video` (`idVideo`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `idUsuario` ON `edumatch2`.`reacciones` (`idUsuario` ASC) VISIBLE;

CREATE INDEX `idVideo` ON `edumatch2`.`reacciones` (`idVideo` ASC) VISIBLE;

USE `edumatch2` ;

-- -----------------------------------------------------
-- Placeholder table for view `edumatch2`.`cursos_disponibles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`cursos_disponibles` (`idCurso` INT, `Titulo` INT, `descripcion` INT, `idCarrera` INT, `Estado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `edumatch2`.`cursos_no_disponibles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`cursos_no_disponibles` (`idCurso` INT, `Titulo` INT, `descripcion` INT, `idCarrera` INT, `Estado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `edumatch2`.`videos_mayor_comentario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`videos_mayor_comentario` (`idVideo` INT, `Titulo` INT, `total_comentario` INT);

-- -----------------------------------------------------
-- Placeholder table for view `edumatch2`.`videos_mayor_vista`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`videos_mayor_vista` (`idVideo` INT, `Titulo` INT, `total_vistas` INT);

-- -----------------------------------------------------
-- Placeholder table for view `edumatch2`.`videos_mayores_reacciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `edumatch2`.`videos_mayores_reacciones` (`idVideo` INT, `Titulo` INT, `total_reacciones` INT);

-- -----------------------------------------------------
-- procedure LlenadoUsuarios
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `LlenadoUsuarios`( IN cantidad INT)
BEGIN 
   DECLARE i INT DEFAULT 1;
   DECLARE NomUs varchar(50);
   declare apellidoM varchar(50);
   declare apellidoP varchar(50);
   declare edad int;
   declare contrase√±a varchar(255);
   declare correo varchar(100);
   declare tel varchar(15);
   declare rol varchar(50);
   
   
   while   i< cantidad do
   set apellidoP = case round(rand()*5)
   when 0 then 'ramos'
   when 1 then 'jimenez'
   when 2 then 'santes'
   when 3 then 'ramirez'
   when 4 then 'saldado'
   when 5 then 'ocpaco'
   else 'reyes'
   end;
   
   set apellidoM = case round(rand()*5)
   when 0 then 'lorenzo'
   when 1 then 'cortes'
   when 2 then 'castillo'
   when 3 then 'islas'
   when 4 then 'casta√±eda'
   when 5 then 'romero'
   else 'ibarra'
   end;
   
   set NomUs = case round(rand()*5)
   when 0 then 'alan'
   when 1 then 'mario'
   when 2 then 'saulo'
   when 3 then 'daniel'
   when 4 then 'obed'
   when 5 then 'dimauro'
   else 'manuel'
   end;
   
   
   set edad = case round(rand()*5)
   when 0 then '19'
   when 1 then '20'
   when 2 then '21'
   when 3 then '22'
   when 4 then '23'
   when 5 then '18'
   else '17'
   end;
   
   set contrase√±a  = case round(rand()*5)
   when 0 then 'abcdskd'
   when 1 then '121232o2d'
   when 2 then '99ds9dis'
   when 3 then 'dsidas9'
   when 4 then '09ds9isda'
   when 5 then 'sdasd92'
   else '0sdasd9'
   end;
   
   set correo  = concat('usuario_',i,'@utxicotepec.edu');
   set tel = concat('7849875678',i);
	
    
	set rol = case round(rand()*2)
   when 0 then 'Usuario'
   when 1 then 'Administrador'
   else 'Usuario'
   end;
   
insert into usuario (Nombre,Apellido_P,Apellido_M,Edad,Contrase√±a,Correo,Telefono,Rol) values (NomUs,apellidoM,apellidoP,edad,contrase√±a,correo,tel,rol);
set i=i+1;
end while;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- function NombreYFechaRegistro
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `NombreYFechaRegistro`(id INT) RETURNS varchar(200) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
    DECLARE nombreCompleto VARCHAR(150);
    DECLARE fecha DATE;
    
    SELECT CONCAT(Nombre, ' ', Apellido_P, ' ', Apellido_M), fecha_reg INTO nombreCompleto, fecha
    FROM usuario
    WHERE idUsuario = id;
    
    RETURN CONCAT(nombreCompleto, ' registrado el ', fecha);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function UsuariosUltimoMes
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `UsuariosUltimoMes`() RETURNS int
    DETERMINISTIC
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total
    FROM usuario
    WHERE fecha_reg >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);
    RETURN total;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizarUsuario`(
    IN pIdUsuario INT,
    IN pNombre VARCHAR(50),
    IN pApellido_P VARCHAR(50),
    IN pApellido_M VARCHAR(50),
    IN pEdad INT,
    IN pContrase√±a VARCHAR(255),
    IN pCorreo VARCHAR(100),
    IN pTelefono VARCHAR(15),
    IN pRol ENUM('Administrador', 'Usuario')
)
BEGIN
    UPDATE usuario
    SET 
        Nombre = pNombre,
        Apellido_P = pApellido_P,
        Apellido_M = pApellido_M,
        Edad = pEdad,
        Contrase√±a = pContrase√±a,
        Correo = pCorreo,
        Telefono = pTelefono,
        Rol = pRol
    WHERE idUsuario = pIdUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizarVideo
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizarVideo`(
    IN pIdVideo INT,
    IN pTitulo VARCHAR(45),
    IN pURL_video VARCHAR(45),
    IN pIdUsuario INT,
    IN pFecha_publicacion VARCHAR(45),
    IN pIdCarrera INT,
    IN pDuracion VARCHAR(45),
    IN pDescripcion VARCHAR(45)
)
BEGIN
    UPDATE video
    SET 
        Titulo = pTitulo,
        URL_video = pURL_video,
        idUsuario = pIdUsuario,
        Fecha_publicacion = pFecha_publicacion,
        idCarrera = pIdCarrera,
        Duracion = pDuracion,
        Descripcion = pDescripcion
    WHERE idVideo = pIdVideo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_anuncio
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizar_anuncio`(
    IN p_idAnuncio INT,
    IN p_Titulo VARCHAR(70),
    IN p_Descripcion VARCHAR(150),
    IN p_Fecha_publicacion DATE,
    IN p_Fecha_vencimiento DATE,
    IN p_idVideo INT
)
BEGIN
    UPDATE anuncio
    SET Titulo = p_Titulo,
        Descripcion = p_Descripcion,
        Fecha_publicacion = p_Fecha_publicacion,
        Fecha_vencimiento = p_Fecha_vencimiento,
        idVideo = p_idVideo
    WHERE idAnuncio = p_idAnuncio;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_curso
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizar_curso`(
    IN p_idCurso INT,
    IN p_Estado VARCHAR(50),
    IN p_Titulo VARCHAR(70),
    IN p_idCarrera INT,
    IN p_Fecha_inicio DATE,
    IN p_fecha_fin DATE
)
BEGIN
    UPDATE curso
    SET Estado = p_Estado,
        Titulo = p_Titulo,
        idCarrera = p_idCarrera,
        Fecha_inicio = p_Fecha_inicio,
        fecha_fin = p_fecha_fin
    WHERE idCurso = p_idCurso;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure actualizar_practica
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `actualizar_practica`(
    IN p_idPractica INT,
    IN p_Titulo VARCHAR(100),
    IN p_Fecha_inicio DATE,
    IN p_Fecha_fin DATE,
    IN p_Estado VARCHAR(100),
    IN p_Descripcion VARCHAR(150),
    IN p_idCurso INT
)
BEGIN
    UPDATE practica
    SET Titulo = p_Titulo,
        Fecha_inicio = p_Fecha_inicio,
        Fecha_fin = p_Fecha_fin,
        Estado = p_Estado,
        Descripcion = p_Descripcion,
        idCurso = p_idCurso
    WHERE idPractica = p_idPractica;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregarUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregarUsuario`(
    IN pNombre VARCHAR(50),
    IN pApellido_P VARCHAR(50),
    IN pApellido_M VARCHAR(50),
    IN pEdad INT,
    IN pContrase√±a VARCHAR(255),
    IN pCorreo VARCHAR(100),
    IN pTelefono VARCHAR(15),
    IN pRol ENUM('Administrador', 'Usuario')
)
BEGIN
    INSERT INTO usuario (
        Nombre, Apellido_P, Apellido_M, Edad, Contrase√±a, Correo, Telefono, Rol,fecha_reg
    ) VALUES (
        pNombre, pApellido_P, pApellido_M, pEdad, pContrase√±a, pCorreo, pTelefono, pRol,curdate()
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregarVideo
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregarVideo`(
    IN pTitulo VARCHAR(45),
    IN pURL_video VARCHAR(45),
    IN pIdUsuario INT,
    IN pIdCarrera INT,
    IN pDuracion time,
    IN pDescripcion VARCHAR(45)
)
BEGIN
    INSERT INTO video (
        Titulo, URL_video, idUsuario, idCarrera, Duracion, Descripcion ,Fecha_publicacion
    ) VALUES (
        pTitulo, pURL_video, pIdUsuario,  pIdCarrera, pDuracion, pDescripcion,curdate()
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregar_anuncio
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregar_anuncio`(
    IN p_Titulo VARCHAR(70),
    IN p_Descripcion VARCHAR(150),
    IN p_Fecha_publicacion DATE,
    IN p_Fecha_vencimiento DATE,
    IN p_idVideo INT
)
BEGIN
    INSERT INTO anuncio (Titulo, Descripcion, Fecha_publicacion, Fecha_vencimiento, idVideo)
    VALUES (p_Titulo, p_Descripcion, p_Fecha_publicacion, p_Fecha_vencimiento, p_idVideo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregar_carrera
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregar_carrera`(
    IN p_Tipo VARCHAR(50),
    IN p_Duracion VARCHAR(70),
    IN p_Descripcion VARCHAR(200),
    IN p_Nombre VARCHAR(100)
)
BEGIN
    INSERT INTO carrera (Tipo, Duracion, Descripcion, Nombre)
    VALUES (p_Tipo, p_Duracion, p_Descripcion, p_Nombre);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregar_curso
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregar_curso`(
    IN p_Estado VARCHAR(50),
    IN p_Titulo VARCHAR(70),
    IN p_idCarrera INT,
    IN p_Fecha_inicio DATE,
    IN p_fecha_fin DATE,
    IN P_descripcion VARCHAR(50)
)
BEGIN
    INSERT INTO curso (Estado, Titulo, idCarrera, Fecha_inicio, fecha_fin,descripcion)
    VALUES (p_Estado, p_Titulo, p_idCarrera, p_Fecha_inicio, p_fecha_fin,p_descripcion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregar_practica
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `agregar_practica`(
    IN p_Titulo VARCHAR(100),
    IN p_Fecha_inicio DATE,
    IN p_Fecha_fin DATE,
    IN p_Estado VARCHAR(100),
    IN p_Descripcion VARCHAR(150),
    IN p_idCurso INT
)
BEGIN
    INSERT INTO practica (Titulo, Fecha_inicio, Fecha_fin, Estado, Descripcion, idCurso)
    VALUES (p_Titulo, p_Fecha_inicio, p_Fecha_fin, p_Estado, p_Descripcion, p_idCurso);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscarUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarUsuario`(
    IN pIdUsuario INT,
    IN pNombre VARCHAR(50),
    IN pApellido_P VARCHAR(50),
    IN pApellido_M VARCHAR(50),
    IN pCorreo VARCHAR(100)
)
BEGIN
    SELECT * FROM usuario
    WHERE 
        (pIdUsuario IS NULL OR idUsuario = pIdUsuario) AND
        (pNombre IS NULL OR Nombre = pNombre) AND
        (pApellido_P IS NULL OR Apellido_P = pApellido_P) AND
        (pApellido_M IS NULL OR Apellido_M = pApellido_M) AND
        (pCorreo IS NULL OR Correo = pCorreo);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscarVideo
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarVideo`(
    IN pIdVideo INT
    
  
)
BEGIN
    SELECT * FROM video
    WHERE 
        (pIdVideo IS NULL OR idVideo = pIdVideo) ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscar_anuncio
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscar_anuncio`(
    IN p_idAnuncio INT
)
BEGIN
    SELECT * FROM anuncio
    WHERE idAnuncio = p_idAnuncio;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscar_curso
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscar_curso`(
    IN p_idCurso INT
)
BEGIN
    SELECT * FROM curso
    WHERE idCurso = p_idCurso;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscar_practica
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscar_practica`(
    IN p_idPractica INT
)
BEGIN
    SELECT * FROM practica
    WHERE idPractica = p_idPractica;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure eliminarUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `eliminarUsuario`(
    IN pIdUsuario INT
)
BEGIN
    DELETE FROM usuario
    WHERE idUsuario = pIdUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure eliminarVideo
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `eliminarVideo`(
    IN pIdVideo INT
)
BEGIN
    DELETE FROM video
    WHERE idVideo = pIdVideo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure eliminar_anuncio
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `eliminar_anuncio`(
    IN p_idAnuncio INT
)
BEGIN
    DELETE FROM anuncio
    WHERE idAnuncio = p_idAnuncio;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure eliminar_curso
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `eliminar_curso`(
    IN p_idCurso INT
)
BEGIN
    DELETE FROM curso
    WHERE idCurso = p_idCurso;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure eliminar_practica
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `eliminar_practica`(
    IN p_idPractica INT
)
BEGIN
    DELETE FROM practica
    WHERE idPractica = p_idPractica;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function videoVistas
-- -----------------------------------------------------

DELIMITER $$
USE `edumatch2`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `videoVistas`() RETURNS varchar(255) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
    DECLARE tituloVideo VARCHAR(255);
    declare totalV int;
    SELECT Titulo , total_vistas INTO tituloVideo,totalV
    FROM video
    ORDER BY total_vistas  DESC
    LIMIT 1;
    RETURN concat (tituloVideo ,' ','con un total de vistas de ', totalV);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `edumatch2`.`cursos_disponibles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `edumatch2`.`cursos_disponibles`;
USE `edumatch2`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `edumatch2`.`cursos_disponibles` AS select `edumatch2`.`curso`.`idCurso` AS `idCurso`,`edumatch2`.`curso`.`Titulo` AS `Titulo`,`edumatch2`.`curso`.`descripcion` AS `descripcion`,`edumatch2`.`curso`.`idCarrera` AS `idCarrera`,`edumatch2`.`curso`.`Estado` AS `Estado` from `edumatch2`.`curso` where (`edumatch2`.`curso`.`Estado` = 'Disponible');

-- -----------------------------------------------------
-- View `edumatch2`.`cursos_no_disponibles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `edumatch2`.`cursos_no_disponibles`;
USE `edumatch2`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `edumatch2`.`cursos_no_disponibles` AS select `edumatch2`.`curso`.`idCurso` AS `idCurso`,`edumatch2`.`curso`.`Titulo` AS `Titulo`,`edumatch2`.`curso`.`descripcion` AS `descripcion`,`edumatch2`.`curso`.`idCarrera` AS `idCarrera`,`edumatch2`.`curso`.`Estado` AS `Estado` from `edumatch2`.`curso` where (`edumatch2`.`curso`.`Estado` = 'No disponible');

-- -----------------------------------------------------
-- View `edumatch2`.`videos_mayor_comentario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `edumatch2`.`videos_mayor_comentario`;
USE `edumatch2`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `edumatch2`.`videos_mayor_comentario` AS select `edumatch2`.`video`.`idVideo` AS `idVideo`,`edumatch2`.`video`.`Titulo` AS `Titulo`,`edumatch2`.`video`.`total_comentario` AS `total_comentario` from `edumatch2`.`video` order by `edumatch2`.`video`.`total_comentario` desc;

-- -----------------------------------------------------
-- View `edumatch2`.`videos_mayor_vista`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `edumatch2`.`videos_mayor_vista`;
USE `edumatch2`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `edumatch2`.`videos_mayor_vista` AS select `edumatch2`.`video`.`idVideo` AS `idVideo`,`edumatch2`.`video`.`Titulo` AS `Titulo`,`edumatch2`.`video`.`total_vistas` AS `total_vistas` from `edumatch2`.`video` order by `edumatch2`.`video`.`total_vistas` desc;

-- -----------------------------------------------------
-- View `edumatch2`.`videos_mayores_reacciones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `edumatch2`.`videos_mayores_reacciones`;
USE `edumatch2`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `edumatch2`.`videos_mayores_reacciones` AS select `edumatch2`.`video`.`idVideo` AS `idVideo`,`edumatch2`.`video`.`Titulo` AS `Titulo`,`edumatch2`.`video`.`total_reacciones` AS `total_reacciones` from `edumatch2`.`video` order by `edumatch2`.`video`.`total_reacciones` desc;
USE `edumatch2`;

DELIMITER $$
USE `edumatch2`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `edumatch2`.`after_usuario_delete`
AFTER DELETE ON `edumatch2`.`usuario`
FOR EACH ROW
BEGIN
    INSERT INTO bitacora_usuario (idUsuario, nombre, fecha, comentario)
    VALUES (OLD.idUsuario, CONCAT(OLD.Nombre, ' ', OLD.Apellido_P, ' ', OLD.Apellido_M), CURDATE(), 'Nuevo usuario agregado');
END$$

USE `edumatch2`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `edumatch2`.`after_usuario_insert`
AFTER INSERT ON `edumatch2`.`usuario`
FOR EACH ROW
BEGIN
    INSERT INTO bitacora_usuario (idUsuario, nombre, fecha, comentario)
    VALUES (NEW.idUsuario, CONCAT(NEW.Nombre, ' ', NEW.Apellido_P, ' ', NEW.Apellido_M), CURDATE(), 'Nuevo usuario agregado');
END$$

USE `edumatch2`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `edumatch2`.`after_usuario_update`
AFTER UPDATE ON `edumatch2`.`usuario`
FOR EACH ROW
BEGIN
    INSERT INTO bitacora_usuario (idUsuario, nombre, fecha, comentario)
    VALUES (NEW.idUsuario, CONCAT(NEW.Nombre, ' ', NEW.Apellido_P, ' ', NEW.Apellido_M), CURDATE(), ' usuario actualizado');
END$$

USE `edumatch2`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `edumatch2`.`after_video_delete`
AFTER DELETE ON `edumatch2`.`video`
FOR EACH ROW
BEGIN
    INSERT INTO bitacora_video (idVideo, idUsuario, titulo, fecha, comentario)
    VALUES (OLD.idVideo, OLD.idUsuario, OLD.titulo, curdate(), 'Se elimin√≥ un video');
END$$

USE `edumatch2`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `edumatch2`.`after_video_insert`
AFTER INSERT ON `edumatch2`.`video`
FOR EACH ROW
BEGIN
    INSERT INTO bitacora_video (idVideo, idUsuario, titulo, fecha, comentario)
    VALUES (NEW.idVideo, NEW.idUsuario, NEW.titulo, curdate(), 'Se subi√≥ un video');
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
